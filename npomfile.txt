package kafka;

import io.gatling.javaapi.core.*;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.galaxio.gatling.kafka.javaapi.protocol.KafkaProtocolBuilder;
import java.util.Map;
import static io.gatling.javaapi.core.CoreDsl.*;
import static org.galaxio.gatling.kafka.javaapi.KafkaDsl.*;

public class KafkaConsumerSimulation extends Simulation {

    // Define Kafka protocol for the consumer (listening to RESPONSE topic)
    private final KafkaProtocolBuilder kafkaConsumerProtocol = kafka()
            .topic("RESPONSE")
            .properties(Map.of(
                    ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092",
                    ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName(),
                    ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName(),
                    ConsumerConfig.GROUP_ID_CONFIG, "gatling-consumer-group"
            ));

    // Consumer scenario: consume messages from the RESPONSE topic.
    // Adjust the DSL as necessary based on plugin capabilities.
    private final ScenarioBuilder kafkaConsumerScenario = scenario("Kafka Consumer")
            .exec(
                kafka("Consume Response")
                    .consume() // Ensure this call aligns with your Kafka DSL version
            );

    {
        setUp(
            kafkaConsumerScenario.injectOpen(atOnceUsers(1))
        ).protocols(kafkaConsumerProtocol);
    }
}
