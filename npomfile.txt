package kafka;

import io.gatling.javaapi.core.*;
import static io.gatling.javaapi.core.CoreDsl.*;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.ConsumerRecord;

import java.time.Duration;
import java.util.Arrays;
import java.util.Properties;

public class KafkaConsumerSimulation extends Simulation {

    // Define a scenario that uses custom consumer logic.
    private final ScenarioBuilder kafkaConsumerScenario = scenario("Kafka Consumer")
        .exec(session -> {
            // Define consumer properties.
            Properties props = new Properties();
            props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
            props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
            props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringDeserializer");
            props.put(ConsumerConfig.GROUP_ID_CONFIG, "gatling-consumer-group");
            props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
            
            // Create Kafka consumer and subscribe to the "RESPONSE" topic.
            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);
            consumer.subscribe(Arrays.asList("RESPONSE"));
            
            int totalMessages = 0;
            long startTime = System.currentTimeMillis();
            // Poll for messages until 1,000 messages are consumed or 30 seconds have elapsed.
            while (totalMessages < 1000 && System.currentTimeMillis() - startTime < 30000) {
                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));
                for (ConsumerRecord<String, String> record : records) {
                    totalMessages++;
                    // Optionally, add validations or logging here.
                    System.out.println("Consumed message: key=" + record.key() + ", value=" + record.value());
                }
            }
            consumer.close();
            
            System.out.println("Total messages consumed: " + totalMessages);
            return session;
        });

    {
        setUp(
            kafkaConsumerScenario.injectOpen(atOnceUsers(1))
        );
    }
}
