package kafka;

import io.gatling.javaapi.core.*;
import org.apache.kafka.common.header.Header;
import org.apache.kafka.common.header.internals.RecordHeader;
import org.apache.kafka.common.header.internals.RecordHeaders;
import org.galaxio.gatling.kafka.javaapi.protocol.KafkaProtocolBuilder;
import org.apache.kafka.clients.producer.ProducerConfig;
import java.util.Map;
import static io.gatling.javaapi.core.CoreDsl.*;
import static org.galaxio.gatling.kafka.javaapi.KafkaDsl.*;

public class KafkaSimulation extends Simulation {

    // Define Kafka protocol for the producer (sending to REQUEST topic)
    private final KafkaProtocolBuilder kafkaProducerProtocol = kafka()
            .topic("REQUEST")
            .properties(Map.of(
                    ProducerConfig.ACKS_CONFIG, "1",
                    ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092",
                    ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringSerializer",
                    ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, "org.apache.kafka.common.serialization.StringSerializer"
            ));

    // Create a header for the message (modify as needed)
    private final RecordHeaders headers = new RecordHeaders(
            new Header[]{ new RecordHeader("test-header", "value".getBytes()) }
    );

    // Producer scenario: send 1,000 messages to the REQUEST topic
    private final ScenarioBuilder kafkaProducerScenario = scenario("Kafka Producer")
            .repeat(1000, "counter").on(
                exec(
                    kafka("Send Request")
                        .send(session -> {
                            String key = "key_" + session.getInt("counter");
                            String value = "value_" + session.getInt("counter");
                            return new Object[]{ key, value, headers };
                        })
                )
            );

    {
        setUp(
            kafkaProducerScenario.injectOpen(atOnceUsers(1))
        ).protocols(kafkaProducerProtocol);
    }
}
